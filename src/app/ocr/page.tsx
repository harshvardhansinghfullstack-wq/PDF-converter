"use client";

import { useState } from "react";
import Tesseract from "tesseract.js";
import Image from "next/image";
import { jsPDF } from "jspdf";
import Navbar from "../components/Navbar"; // If you have a Navbar component

export default function ImageTextExtractor() {
  const [image, setImage] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [extractedText, setExtractedText] = useState<string>("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const droppedFile = e.dataTransfer.files[0];
    if (droppedFile && droppedFile.type.startsWith("image/")) {
      setImage(droppedFile);
      setPreviewUrl(URL.createObjectURL(droppedFile));
      setError(null);
      setExtractedText("");
    } else {
      setError("Only image files are supported.");
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selected = e.target.files?.[0];
    if (selected && selected.type.startsWith("image/")) {
      setImage(selected);
      setPreviewUrl(URL.createObjectURL(selected));
      setError(null);
      setExtractedText("");
    } else {
      setError("Only image files are supported.");
    }
  };

  const extractText = async () => {
    if (!image) {
      setError("Please upload an image first");
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const result = await Tesseract.recognize(image, "eng", {
        logger: (m) => console.log(m),
      });
      setExtractedText(result.data.text);
    } catch (err) {
      console.error(err);
      setError("Error processing image. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const generatePDF = () => {
    if (!extractedText) {
      setError("No text to generate PDF from.");
      return;
    }

    const doc = new jsPDF();
    doc.setFont("helvetica");
    doc.setFontSize(12);

    const lines = doc.splitTextToSize(extractedText, 180);
    doc.text("Extracted Text from Image", 15, 15);
    doc.text(lines, 15, 25);

    doc.setFontSize(10);
    doc.text("Generated by ImageTextExtractor", 15, doc.internal.pageSize.height - 10);
    doc.save("extracted-text.pdf");
  };

  return (
    <div>
      <Navbar />
      <div style={{ maxWidth: "900px", margin: "4rem auto", padding: "0 2rem" }}>
        <h1 style={{ fontSize: "2rem", marginBottom: "2rem" }}>Extract Text from Image</h1>

        {error && (
          <div
            style={{
              backgroundColor: "#ffe6e6",
              padding: "1rem",
              borderRadius: "5px",
              color: "#d00",
              marginBottom: "1rem",
            }}
          >
            {error}
          </div>
        )}

        <div
          onDrop={handleDrop}
          onDragOver={(e) => e.preventDefault()}
          style={{
            border: "2px dashed #90EE90",
            backgroundColor: "#f0fff0",
            borderRadius: "10px",
            padding: "4rem",
            textAlign: "center",
            marginBottom: "2rem",
          }}
        >
          <i className="fas fa-cloud-upload-alt" style={{ fontSize: "3rem", color: "#888" }}></i>
          <p style={{ marginTop: "1rem", marginBottom: "1rem" }}>Drag and drop an image file here</p>
          <label
            htmlFor="imageInput"
            style={{
              backgroundColor: "white",
              padding: "0.5rem 1rem",
              border: "1px solid #ccc",
              borderRadius: "5px",
              cursor: "pointer",
              display: "inline-block",
            }}
          >
            Select Image
            <input
              id="imageInput"
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              style={{ display: "none" }}
            />
          </label>
        </div>

        {image && (
          <div
            style={{
              backgroundColor: "#f9f9f9",
              padding: "1rem",
              borderRadius: "5px",
              marginBottom: "1rem",
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
            }}
          >
            <span>
              <i className="fas fa-file-image" style={{ color: "#0a0", marginRight: "0.5rem" }}></i>
              {image.name}
            </span>
            <button
              onClick={() => {
                setImage(null);
                setPreviewUrl(null);
                setExtractedText("");
              }}
              style={{
                background: "none",
                border: "none",
                color: "#c00",
                cursor: "pointer",
                fontSize: "1rem",
              }}
            >
              <i className="fas fa-trash-alt"></i>
            </button>
          </div>
        )}

        {previewUrl && (
          <div style={{ marginBottom: "2rem", textAlign: "center" }}>
            <Image
              src={previewUrl}
              alt="Image preview"
              width={400}
              height={300}
              style={{ objectFit: "contain", borderRadius: "8px" }}
            />
          </div>
        )}

        <button
          onClick={extractText}
          disabled={!image || isLoading}
          style={{
            backgroundColor: isLoading ? "#ccc" : "#0070f3",
            color: "white",
            border: "none",
            padding: "0.6rem 1.2rem",
            borderRadius: "5px",
            cursor: isLoading ? "not-allowed" : "pointer",
            fontSize: "1rem",
            marginRight: "1rem",
          }}
        >
          <i className="fas fa-search" style={{ marginRight: "0.5rem" }}></i>
          {isLoading ? "Processing..." : "Extract Text"}
        </button>

        <button
          onClick={generatePDF}
          disabled={!extractedText}
          style={{
            backgroundColor: extractedText ? "#28a745" : "#ccc",
            color: "white",
            border: "none",
            padding: "0.6rem 1.2rem",
            borderRadius: "5px",
            cursor: extractedText ? "pointer" : "not-allowed",
            fontSize: "1rem",
          }}
        >
          <i className="fas fa-file-download" style={{ marginRight: "0.5rem" }}></i>
          Download PDF
        </button>

        {extractedText && (
          <div
            style={{
              backgroundColor: "#f1f1f1",
              padding: "1rem",
              borderRadius: "5px",
              marginTop: "2rem",
              whiteSpace: "pre-wrap",
            }}
          >
            <h2 style={{ fontSize: "1.2rem", marginBottom: "0.5rem" }}>Extracted Text:</h2>
            <pre>{extractedText}</pre>
          </div>
        )}
      </div>
    </div>
  );
}
